name: Issue Trigger
on:
  issues:
    types: [opened, transferred, assigned]

jobs:
  Add-Missing-Labels-To-Issues:
    runs-on: ubuntu-latest
    # Only trigger this action when an issue is newly created
    if: ${{ github.event_name == 'issues' && (github.event.action == 'opened' || github.event.action == 'transferred')}}
    steps:
      - uses: actions/checkout@v4    
      # Check if the issue has required labels
      - name: Check Labels
        uses: actions/github-script@v6
        id: check-labels
        with:
          script: |
            const script = require('./github-actions/trigger-issue/add-missing-labels-to-issues/check-labels.js')
            const checkLabels = script({g: github, c: context})
            return checkLabels
            
      #Checks which teams the user is on 
      - uses: tspascoal/get-user-teams-membership@v2
        id: checkUserMember
        with:
          username: ${{ github.actor }}
          organization: 'hackforla'
          team: 'website-write'
          GITHUB_TOKEN: ${{ secrets.TEAMS }}
          
      # Checks if user is on the website-write-team
      - if: ${{ steps.checkUserMember.outputs.isTeamMember == 'true' }}
      # Post comment based on the previous action's results
        name: Post Comment
        uses: actions/github-script@v6
        id: post-comment
        with:
          script: |
            const results = ${{ steps.check-labels.outputs.result }}
            const script = require('./github-actions/trigger-issue/add-missing-labels-to-issues/post-labels-comment.js')
            script({g: github, c:context}, results)

  #Fetch members of the "website-write" team and filter maintainer role          
  Fetch-And-Filter-Team-Members:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch and filter team members
        id: fetch-filter-team-members
        run: |
          const { HttpClient } = require('@actions/http-client');
          const token = process.env.GITHUB_TOKEN;
          const org = 'hackforla';
          const teamSlug = 'website-write';

          const http = new HttpClient('my-action');

          const response = await http.get(`https://api.github.com/orgs/${org}/teams/${teamSlug}/members`, {
            headers: {
              Authorization: `Bearer ${token}`,
            },
          });

          const members = await response.readBody();
          console.log(members);

          const maintainers = members.filter(member => member.role === 'maintainer');
          console.log(maintainers);

          core.setOutput('team-members', members);
          core.setOutput('maintainers', maintainers);
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  
  #Asking for preliminary update when issue is assigned
  Ask-For-Preliminary-update:
    runs-on: ubuntu-latest
    #Triggers when the issue is newly assigned
    if: ${{ github.event_name == 'issues' && github.event.action == 'assigned'}}
    steps:
      - uses: actions/checkout@v4  

      # Check if the issue has the required roles
      - name: Check Labels Prelim
        uses: actions/github-script@v6
        id: check-labels-prelim
        with:
          script: |
            const script = require('./github-actions/trigger-issue/add-preliminary-comment/check-label-preliminary-update.js')
            const checklabels = script({g: github, c: context})
            return checklabels


      # Post the comment based on the result of the previous step
      - name: Post assigning issue comment
        id: assigned-comment
        uses: actions/github-script@v6
        with:
          script: |
            const results = ${{ steps.check-labels-prelim.outputs.result }}
            const script = require('./github-actions/trigger-issue/add-preliminary-comment/preliminary-update-comment.js')
            script({g: github, c:context}, results, maintainers)

